# TODO(rwsu): plugin choice 
- name: Create neutron-api configmaps
  ignore_errors: yes
  k8s_v1_config_map:
    host: "{{coe_host}}"
    context: "{{coe_config_context}}"
    kubeconfig: "{{coe_config_file}}"
    name: neutron-api
    namespace: "{{namespace}}"
    state: present
    debug: yes
    labels:
      service: neutron
    data:
      config.json: |
        {
            "command": "/usr/bin/neutron-server --config-file /usr/share/neutron/neutron-dist.conf --config-dir /usr/share/neutron/server --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugin.ini --config-dir /etc/neutron/conf.d/common --config-dir /etc/neutron/conf.d/neutron-server",
            "config_files": [
              {
                "source": "/var/lib/kolla/config_files/neutron.conf",
                "dest": "/etc/neutron/neutron.conf",
                "owner": "neutron",
                "perm": "0644"
              },
              {
                "source": "/etc/neutron/plugins/ml2/ml2_conf.ini",
                "dest": "/etc/neutron/plugin.ini",
                "owner": "neutron",
                "perm": "0644"
              }
            ],
            "permissions": [
              {
                "path": "/var/log/neutron",
                "owner": "neutron:neutron",
                "recurse": "true"
              }
            ]
        }
      neutron.conf: |
        {{neutron_conf['content'] | b64decode}}
 
- name: Create neutron database
  include_role:
    name: ansible-role-k8s-tripleo
    tasks_from: create-database
  vars:
    service_name: 'neutron'
    database_name: 'neutron'

# NOTE(flaper87): Here you'll create jobs for db-sync, service bootstrap. Create
# deployments for the various services, a kubernetes service if an API is being
# exposed, etc.

- name: Create neutron db-sync job
  k8s_v1_job:
    host: "{{coe_host}}"
    context: "{{coe_config_context}}"
    kubeconfig: "{{coe_config_file}}"
    name: neutron-db-sync
    namespace: "{{namespace}}"
    state: present
    restart_policy: OnFailure
    containers:
      - image: tripleoupstream/centos-binary-neutron-server
        name: neutron-db-sync
        env:
          - name: KOLLA_CONFIG_STRATEGY
            value: COPY_ALWAYS
          - name: KOLLA_BOOTSTRAP
            value: ''
        volume_mounts:
        - name: kolla-config
          mountPath: /var/lib/kolla/config_files/
    volumes:
      - name: kolla-config
        config_map:
          name: neutron-api
    state: present

- name: Create neutron-api service
  k8s_v1_service:
    host: "{{coe_host}}"
    context: "{{coe_config_context}}"
    kubeconfig: "{{coe_config_file}}"
    name: "{{neutron_hostname}}"
    namespace: "{{namespace}}"
    state: present
    ports:
      - port: 9696
        name: neutron-api
    selector:
      app: neutron-api
  register: neutron_api_service
  
- set_fact:
    neutron_api_address: "{{neutron_api_service.service.spec.cluster_ip}}"
  when: neutron_use_service_ip

- name: Create neutron-api deployment
  k8s_apps_v1beta1_deployment:
    host: "{{coe_host}}"
    context: "{{coe_config_context}}"
    kubeconfig: "{{coe_config_file}}"
    name: neutron-api
    namespace: "{{namespace}}"
    replicas: 1
    spec_revision_history_limit: 3
    spec_template_metadata_labels:
      app: neutron-api
    containers:
      - name: neutron-api
        image: tripleoupstream/centos-binary-neutron-server
        imagePullPolicy: IfNotPresent
        env:
        - name: KOLLA_CONFIG_STRATEGY
          value: COPY_ALWAYS
        - name: KOLLA_KUBERNETES
          value: ""
        ports:
          - name: neutron-api
            containerPort: "{{neutron_api_port}}"
        volume_mounts:
        - name: kolla-config
          mountPath: /var/lib/kolla/config_files/
    volumes:
      - name: kolla-config
        config_map:
          name: neutron-api
    state: present
